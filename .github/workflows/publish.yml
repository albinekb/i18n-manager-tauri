name: 'publish'
on:
  push:
    branches:
      - release

jobs:
  create-release:
    runs-on: ubuntu-20.04
    outputs:
      releaseId: ${{ steps.create-release.outputs.result }}
      version: ${{ env.PACKAGE_VERSION }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: get changelog
        id: get-changelog
        shell: bash
        run: |
          changelog="$(./scripts/get-changelog.sh)"
          echo "${changelog}" >> $GITHUB_STEP_SUMMARY
          if [[ ! "${changelog}" == *"exiting.."* ]]; then
            echo 'CHANGELOG<<EOF' >> $GITHUB_OUTPUT
            echo "${changelog}" >> $GITHUB_OUTPUT
            echo 'EOF' >> $GITHUB_OUTPUT
          fi
      - name: Fail release if no changelog
        if: ${{ steps.get-changelog.outcome != 'success' || steps.get-changelog.outputs.CHANGELOG == '' }}
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('No changelog found')
      - name: create release
        if: ${{ steps.get-changelog.outputs.CHANGELOG != '' }} 
        id: create-release
        uses: actions/github-script@v6
        env:
          CHANGELOG: ${{ steps.get-changelog.outputs.CHANGELOG }}
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `App v${process.env.PACKAGE_VERSION}`,
              body: `${process.env.CHANGELOG}`,
              draft: true,
              prerelease: false
            })

            return data.id
  build-tauri:
    needs: create-release
    if: ${{ needs.create-release.outputs.releaseId != '' }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Create tauri.conf.prod.json
        run: yarn tauri:setup-config
      - name: Setup cache
        uses: ./.github/actions/cache
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: Install aarch64 dependencies
        run: rustup target add aarch64-apple-darwin
      - name: Install app dependencies
        run: yarn --frozen-lockfile
      - name: Release tauri x64
        uses: tauri-apps/tauri-action@dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          configPath: tauri.conf.prod.json
          releaseId: ${{ needs.create-release.outputs.releaseId }}
          args: --target x86_64-apple-darwin
      - name: Release tauri aarch64
        uses: tauri-apps/tauri-action@dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          configPath: tauri.conf.prod.json
          releaseId: ${{ needs.create-release.outputs.releaseId }}
          args: --target aarch64-apple-darwin

  publish-release:
    runs-on: ubuntu-20.04
    needs: [create-release,build-tauri]
    if: ${{ needs.build-tauri.result == 'success' }}
    steps:
      - name: Publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.releaseId }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })

  delete-release:
    runs-on: ubuntu-20.04
    needs: [create-release, build-tauri]
    if: ${{ needs.build-tauri.result == 'failure' }}
    steps:
    - name: Delete release
      id: delete-release
      uses: actions/github-script@v6
      env:
        release_id: ${{ needs.create-release.outputs.releaseId }}
      with:
        script: |
          github.rest.repos.deleteRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: process.env.release_id
          })
    
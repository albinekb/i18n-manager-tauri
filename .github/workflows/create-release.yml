name: 'create-release'

on:
  workflow_call:
    outputs:
      releaseId:
        description: "The created release id"
        value: ${{ jobs.create-release.outputs.releaseId }}

jobs:
  create-release:
    runs-on: ubuntu-20.04
    outputs:
      releaseId: ${{ steps.create-release.outputs.result }}
      version: ${{ env.PACKAGE_VERSION }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: get version
        id: get-version
        run: |
          version=$(node -p "require('./package.json').version")
          echo "PACKAGE_VERSION=${version}" >> $GITHUB_ENV
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "tag=v${version}" >> $GITHUB_OUTPUT
          echo "tag=v${version}" >> $GITHUB_ENV
      - name: Check that release is not already published
        uses: actions/github-script@v6
        env:
          TAG: ${{ steps.get-version.outputs.tag }}
        with:
          script: |
            const { status, data } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: process.env.TAG
            }).catch(error => {
              if (error.status === 404) {
                return { status: error.status }
              }
              throw error
            })
            if (status === 200) {
              const  { id: release_id, draft, html_url } = data

              if (!draft) {
                core.setFailed(`Release already exist and is published: ${html_url}`)
                return
              }
              
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id
              })

              core.info('Deleted existing draft release')
            }
      - name: get changelog
        id: get-changelog
        shell: bash
        run: |
          changelog="$(./scripts/get-changelog.sh)"
          echo "${changelog}" >> $GITHUB_STEP_SUMMARY
          if [[ ! "${changelog}" == *"exiting.."* ]]; then
            echo 'CHANGELOG<<EOF' >> $GITHUB_OUTPUT
            echo "${changelog}" >> $GITHUB_OUTPUT
            echo 'EOF' >> $GITHUB_OUTPUT
          fi
      - name: Verify changelog
        if: ${{ steps.get-changelog.outcome != 'success' || steps.get-changelog.outputs.CHANGELOG == '' }}
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('No changelog found')
      - name: create release
        if: ${{ steps.get-changelog.outputs.CHANGELOG != '' }} 
        id: create-release
        uses: actions/github-script@v6
        env:
          CHANGELOG: ${{ steps.get-changelog.outputs.CHANGELOG }}
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `App v${process.env.PACKAGE_VERSION}`,
              body: `${process.env.CHANGELOG}`,
              draft: true,
              prerelease: false
            })

            return data.id
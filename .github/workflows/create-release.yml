name: 'create-release'

on:
  workflow_call:
    outputs:
      releaseId:
        description: "The created release id"
        value: ${{ jobs.create-release.outputs.releaseId }}
      tag:
        description: "The tag for this release"
        value: ${{ jobs.create-release.outputs.tag }}


jobs:
  create-release:
    runs-on: ubuntu-20.04
    outputs:
      releaseId: ${{ steps.update-release.outputs.result || steps.create-release.outputs.result }}
      tag: ${{ steps.get-tag.outputs.tag }}
    steps:
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Get latest tag
        id: get-tag
        uses: actions/github-script@v6
        with:
          script: |
            const { status, data: tags } = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            const tag = tags?.find(tag => tag.name.startsWith('v'))


            if (!tag) {
              core.setFailed('Did not find latest tag')
              return
            }

            core.setOutput('tag', tag.name)
            core.setOutput('version', tag.name.replace('v', ''))
      - name: Check that release is not already published
        id: check-release
        uses: actions/github-script@v6
        env:
          TAG: ${{ steps.get-tag.outputs.tag }}
        with:
          script: |
            const { status, data: releses } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            const release = releses.find(r => r.tag_name === process.env.TAG)
            if (release) {
              const  { id, draft, html_url } = release

              if (!draft) {
                core.setFailed(`Release already exist and is published: ${html_url}`)
                return
              }

              core.info(`Found existing draft release: ${html_url}`)
              core.setOutput('releaseId', release.id)
            } else {
              core.info(`Did not find release for ${process.env.TAG}`)
            }
      - name: Get changelog
        id: 'get-changelog'
        uses: actions/github-script@v6
        env:
          TAG: ${{ steps.get-tag.outputs.tag }}
        with:
          script: |
              const { owner, repo } = context.repo
              const ref = `tags/${process.env.TAG}`
              const { data: { object: { sha, type } } } = await github.rest.git.getRef({
                owner,
                repo,
                ref,
              })

              if (type !== 'tag') {
                if (type !== 'commit') {
                  throw new Error(`Unexpected type ${type} for ${ref}`)
                }

                const { data: { message } } = await github.rest.git.getCommit({
                  owner,
                  repo,
                  commit_sha: sha,
                })

                const changelog = message.trim().replace(/^ðŸš¢.+/, '').replace(/^(\n)+/,'')
              
                if (!changelog) {
                  core.setFailed(`Did not find changelog for ${ref}`)
                  return
                }
                core.setOutput('changelog', changelog)
                core.exportVariable('CHANGELOG', changelog)
                return
              
              }

              const { data: { message } } = await github.rest.git.getTag({
                owner,
                repo,
                tag_sha: sha,
              });

              const changelog = message.trim()
              if (!changelog) {
                core.setFailed(`Did not find changelog for ${ref}`)
                return
              }

              core.setOutput('changelog', changelog)
              core.exportVariable('CHANGELOG', changelog)
      - name: Update existing release
        id: update-release
        if: ${{ steps.check-release.outputs.releaseId != null }}
        uses: actions/github-script@v6
        env:
          RELEASE_ID: ${{ steps.check-release.outputs.releaseId }}
          TAG: ${{ steps.get-tag.outputs.tag }}
          CHANGELOG: ${{ steps.get-changelog.outputs.changelog }}
        with:
          script: |
            const { data } = await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.RELEASE_ID,
              name: `App ${process.env.TAG}`,
              body: `${process.env.CHANGELOG}`,
            })

            return data.id
      - name: Create release
        if: ${{ steps.check-release.outputs.releaseId == null }}
        id: create-release
        uses: actions/github-script@v6
        env:
          CHANGELOG: ${{ steps.get-changelog.outputs.changelog }}
          TAG: ${{ steps.get-tag.outputs.tag }}
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: process.env.TAG,
              name: `App ${process.env.TAG}`,
              body: `${process.env.CHANGELOG}`,
              draft: true,
              prerelease: false
            })

            return data.id